18 - La salida es el resultado de interpretar la línea introducida.

21 - '\t\n' se interpreta literalmente, mostrando \t\n por pantalla
     mientras que "\t\n" interpreta los caracteres de escape haciendo
     que se muestre una tabulación seguida de un final de línea.

22 - %q[<texto>] hace que se interprete todo su contenido como un
     texto literal, sin necesidad de escapar comillas simples, dobles,
     caracteres de escape, etc.

23 - %Q[<texto>] hace lo mismo que %q[<texto>], pero cuando se
     encuentra con caracteres de escape '\', no vuelve a introducir
     un caracter de escape más, haciendo que en su salida éstos se
     puedan interpretar.

24 - "--4--\n--2--\n".

25 - "--\#{a}--\n--\#{b}--\n".

26
   - La subcadena que empieza por la posición 0 y de tamaño 2: "he".
   - La última letra de la cadena: "o".
   - La subcadena que empieza por 0 y tiene tamaño máximo 10: "hello".

27 - "hello world".

28 - "...".

29 - "222".

30 - Introduce cada palabra separada por espacios en un array.
     ["this", "is", "a", "test"]

31 - En el array que crea, los símbolos de escape se escapan de tal forma que
     no se interpreta el comando al que se extienden.
     ["\\t", "\\n"]

32 - El array no escapa los caracteres de escape, por lo que los símbolos
     se interpretan como tabulación y retorno de carro, no como '\t' y '\n'.
     ["\t", "\n"]

33 - Contiene un array de 3 números nulos: 'nil'.

34 - Contiene un array de 3 enteros inicializados a 0.

35 - Una matriz con la siguiente forma:
     1	2
     3	4

36 - Queda un array donde en cada posición i, el contenido es un entero con
     valor 2*i.
     [0, 2, 4]

37
   - El elemento de la posición 1: ["b"].
   - El segundo elemento empezando por el final y el siguiente: ["d", "e"].
   - Los elementos del rango [0, 2]: ["a", "b", "c"].
   - Los elementos del rango [0, 1): ["a"].
   - Los elementos del rango [1, 0] empezando por el final: ["d", "e"].

38
   - El array de letras tras sustituir las 2 primeras posiciones por 'A' y
     'B': ["A", "B", "c", "d", "e"].
   - El array tras sustituir el rango [2, 4] por 'C', 'D' y 'E':
     ["A", "B", "C", "D", "E"].
   - Se inserta [1, 2, 3] en el array: [1, 2, 3, "A", "B", "C", "D", "E"].
   - Se borran las primeras 2 posiciones del array:
     [3, "A", "B", "C", "D", "E"].
   - Sustituye la última posición por 'Z': [3, "A", "B", "C", "D", "Z"].
   - Se sustituyen las 2 últimas posiciones por un solo 'nil':
     [3, "A", "B", "C", nil].

39
   - Se crea el array de enteros: [1, 2, 3, 4].
   - Se insertan los números 4 y 5 al final del array: [1, 2, 3, 4, 4, 5].
   - Se añade un array como último elemento de este array:
     [1, 2, 3, 4, 4, 5, [6, 7, 8]].
   - TypeError: no implicit conversion of Fixnum into Array
	from (irb):69:in `+'
	from (irb):69
	from /usr/local/rvm/rubies/ruby-2.0.0-p247/bin/irb:13:in `<main>'
     El error indica que no se ha definido una suma entre array y número
     entero.

40
   - ["a", "b", "c", "b", "a"]
   - Se borran todas las 'b', 'c' y 'd' del array, aunque estén repetidas:
     ["a", "a"].

41 - Crea un array de 8 enteros de valor '0'.

42
   - Se añade el 1 al array: [1].
   - Se añaden el 2 y el 3: [1, 2, 3].
   - Se añade el array [4, 5, 6] como último elemento: [1, 2, 3, [4, 5, 6]].
   - Se añaden el 7 y el 8 al final: [1, 2, 3, [4, 5, 6], 7, 8].

43
   - Se hace la unión entre los dos conjuntos no introduciendo duplicados:
     [1, 2, 3, 4, 5].
   - Hace lo mismo que el anterior, pero introduce los elementos de b
     primero: [5, 4, 3, 2, 1].
   - Se crea un array con los elementos comunes no repetidos entre a y b:
     [2, 3, 4].
   - Hace lo mismo que el anterior, pero introduce los elementos de b
     primero: [4, 3, 2].

44
   - El método "to_a()" de la clase "Range" convierte el rango en un array
     con todos los elementos: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10].
   - Hace lo mismo que lo anterior, pero el rango está definido de tal forma
     que no se incluye el límite superior del rango en el conjunto:
     [1, 2, 3, 4, 5, 6, 7, 8, 9].
   - Devuelve 'false' porque el 10 no forma parte del rango.
   - Devuelve 'true' porque el 8 forma parte del rango.
   - Indica los números que ocupan posiciones pares en el rango, además de que
     especifica de qué rango se trata: 1 3 5 7 9 => 1...10.
   - NoMethodError: undefined method `to_a' for 3:Fixnum
	from (irb):13
	from /usr/bin/irb:12:in `<main>'
     El error surge porque se intenta acceder al método "to_a()" del objeto "3",
     se soluciona parentizando:
     (1..3).to_a

45
   - true
   - true
   - true
     Todas dan como resultado "verdadero" porque esos números están todos dentro
     del rango. Los métodos 'member?()' e 'include?()' son equivalentes.

46
   - TrueClass.
   - FalseClass.
   - hello
     => nil
   - => nil
   - (irb):25: warning: string literal in condition
     hello
     => nil
     Aquí vemos que Ruby no evalúa como 'false' el número cero ni la cadena
     vacía, pero sí lo hace con el valor 'nil'.

47
   - Symbol.
   - false. Esto es porque su valor no es una cadena, sino un símbolo.
   - true.
   - Symbol.
   - true. El método 'to_sym()' de la clase String lo convierte en Symbol y por
     eso se evalúa como verdadera la expresión.
   - true. El método 'to_s()' de la clase Symbol hace lo contrario, por lo que
     también se evalúa a verdadero.

48
   - Rub. Al hacer la igualación no se hace una copia del contenido, sino que
     se crea un alias de la variable s.
   - RubJava. Cuando se iguala la variable a "Java", se crea un objeto de tipo
     String y se referencia por la variable t, sin modificar el contenido del
     objeto al que apuntaba previamente.

49 - "3 rubies".

50
   - [4, 5]. Los valores se asignan respectivamente a las variables 'x' e 'y'.
   - 5. Esa expresión asigna a la variable z el valor mayor de 'x' e 'y'.
   - [1, 2, 3]. Ahora x=1, y=2 y z=3.

51
   - Devuelve el array de claves (símbolos) del hash x: [:a, :b].
   - Devuelve el array de valores: [1, 2].
   - {:a=>1, :b=>2, :c=>3}.
   - No se borra nada, porque 'a' != :a.
     {:a=>1, :b=>2, :c=>3}
   - {:b=>2, :c=>3}.
   - Se eliminan los elementos con valor par y sólo queda el elemento de
     clave ':a': {:a=>1}.
   - {:a=>1}.

52 - Llama a un bloque de código con los parámetros 4 y 5.

53 - Crea un nuevo objeto de la clase Hash en el que si se accede a una clave
     que no existe, devuelve el valor '0'. La otra sentencia hace que cuando se
     accede a un valor de clave que no existe devuelva 'nil'.

54 - ["hello", "world", "hello", "LPP"]. Se analiza la cadena de texto y se
     aplica la expresión regular "\w+", devolviendo todas las palabras dentro
     de la cadena en un array.

55 - Muestra por pantalla una línea por cada clave, ordenadas por la clave de
     menor a mayor (a < b <...).
